namespace = GIMIv8

; Key Bindings -------------------------

[KeyToggleMods]
Key = no_modifiers F6
$costume_mods = 0,1
type = cycle

; [KeyToggleCompatibilityMode]
; key = ALT F12
; run = CommandListToggleCompatibilityMode

[KeyToggleUserGuide]
key = no_modifiers F12
type = cycle
$show_user_guide = 0,1

[KeyToggleHuntingModeGuide]
key = CTRL F12
type = cycle
$show_hunting_mode_guide = 0,1

; [KeyHideNotification]
; key = X
; key = XB_X
; run = CommandListHideNotification

; API -------------------------

; Prints text on screen using provided params
[CommandListPrintText]
; Input:
; Resource\GIMIv8\Text
; Resource\GIMIv8\TextParams
;
; Usage example (resource formats are listed below):
; Resource\GIMIv8\Text = ref ResourceMyText
; Resource\GIMIv8\TextParams = ref ResourceMyTextParams
; run = CommandList\GIMIv8\PrintText
run = CommandListRenderText

; Text string example resource printable by CommandListPrintText
[ResourceTextExample]
type = Buffer
data = "Hello World!"

; Text file example resource printable by CommandListPrintText
[ResourceTextFileExample]
type = buffer
format = R8_UINT
filename = MyText.txt

; Text params example resource for CommandListPrintText
; Using these parameter buffers as a way to pass in constant parameters without
; taking up any of the IniParams slots while still allowing the parameters to
; be customised on a per-message basis.
[ResourceTextParamsExample]
type = StructuredBuffer
array = 1
data = R32_FLOAT  -0.25 +0.15 +0.25 -0.05   1.00 1.00 1.00 1.00   0.00 0.00 0.00 0.95   0.02  0.05   2 1   1   1.0
;                x1-^  y1-^  x2-^  y2-^   | R-^  G-^  B-^  A-^  | R-^  G-^  B-^  A-^  | ^-H    V-^ | ^ ^ | ^- text alignment: 0=left 1=center 2=right | ^- font scale
;                Rectangle (range -1:+1)  | Text Color          | Background Color    | Border     |  ^- h/v-anchor: 0=none 1=left/top 2=center 3=right/bottom 

[Include Help]
include = help.ini
[Include FixDash]
include = Libraries\FixDash.ini
[Include HealthBar]
include = Libraries\HealthBar.ini
[Include Offset]
include = Libraries\Offset\main.ini
[Include ORFix]
include = Libraries\ORFix.ini
[Include Region]
include = Libraries\Region.ini
[Include Tracking]
include = Libraries\Tracking.ini

[Include TexFx Main]
include = Libraries\TexFx\main.ini
; Enable this when TexFx is updated to v1.5
; [Include TexFx Config]
; include = Libraries\TexFx\Config.ini
[Include TexFx DefaultCustomShader]
include = Libraries\TexFx\hic_sunt_dracones\DefaultCustomShader.ini
[Include TexFx OutlinePixelShaderRegex]
include = Libraries\TexFx\hic_sunt_dracones\OutlinePixelShaderRegex.ini
[Include TexFx DiffusePixelShaderRegex]
include = Libraries\TexFx\hic_sunt_dracones\DiffusePixelShaderRegex.ini
[Include TexFx ComponentFriendlyBuiltinShaders]
include = Libraries\TexFx\hic_sunt_dracones\ComponentFriendlyBuiltinShaders.ini
; [Include TexFx]
; include_recursive = Libraries\TexFx

; Constants -------------------------
[Constants]
global $version = 8.00

; Used for text output if autodetection fails
global $window_width = 1920
global $window_height = 1080

global persist $first_run = 1
global $show_user_guide = 0
global $show_hunting_mode_guide = 0
; global $show_compatibility_mode_notification = 0
; global $enable_compatibility_mode = -1
; global $compatibility_mode_switch_time = 0

; Present -------------------------

[Present]
; pre Resource\Debugger\DebugRW = copy ResourceDebugRW
run = CommandListRenderGUI

[ResourceVersionNotification]
type = Buffer
data = "GIMI 8.0.0 (PRESS F12 TO SHOW GUIDE)"

; Shader overrides -----------------------------------------
; This is very inefficient hence is limited to the most common resources

[ShaderRegexEnableTextureOverrides]
shader_model = vs_4_0 vs_4_1 vs_5_0 vs_5_1
run = CommandListSkin

[ShaderOverrideCharacterRoot]
hash = 653c63ba4a73ca8b
run = CommandListSkin
filter_index = 12345564

[CommandListSkin]
if $costume_mods
	checktextureoverride = ps-t0
	checktextureoverride = ps-t1
	checktextureoverride = ps-t2
	checktextureoverride = ps-t3
	checktextureoverride = vb0
	checktextureoverride = vb1
	checktextureoverride = vb2
	checktextureoverride = ib
	x140 = 0
endif

[CommandListSkinTexture]
if $costume_mods
	checktextureoverride = ps-t1
	checktextureoverride = ps-t2
	checktextureoverride = ps-t3
	checktextureoverride = ps-t4
	checktextureoverride = ps-t5
	checktextureoverride = ps-t6
	checktextureoverride = ps-t7
	checktextureoverride = ps-t8
	checktextureoverride = ps-t9
	checktextureoverride = ps-t10
	x140 = 0
endif

; Resources -------------------------

[ResourceDebugRW]
type = RWBuffer
format = R32G32B32A32_FLOAT
array = 128

; Text Printing -------------------------

[CommandListPassWindowInfo]
; Pass a game window size to the shader
if window_width >= 640
    x0 = window_width
    y0 = window_height
; Fall back to backup methods if user gets zeroes due to 3dmigoto bug
else if rt_width >= 640
    x0 = rt_width
    y0 = rt_height
else if res_width >= 640
    x0 = res_width
    y0 = res_height
else
    x0 = $window_width
    y0 = $window_height
endif

[CommandListRenderText]
; Backup used IniParams
local $bak_x = x
local $bak_y = y
; Pass window size in a fail-safe way
run = CommandListPassWindowInfo
; Calculate positions of all chars
run = CustomShaderFormatText
; Renter formatted text
run = CustomShaderRenderText
; Restore IniParams:
x = $bak_x
y = $bak_y

[CustomShaderFormatText]
; The compute shader scans the text and breaks it up into smaller chunks for
; each geometry shader invocation to render (max 64 characters each),
; calculating the position on the screen where each chunk of text is positioned
; wrapping long lines as needed. This is only run when necessary, not every
; frame.
cs = Shaders/TextPrinter.hlsl
vs = null
ps = null
hs = null
ds = null
gs = null
; Pass resources to the shader
cs-t100 = ResourceFont
if ResourceText !== null
	cs-t113 = ResourceText
	cs-t114 = ResourceTextParams
	clear = ResourceTextPosition
	cs-u0 = ResourceTextPosition
    ; Run the compute shader
	dispatch = 1, 1, 1
endif
; Unbind resources
cs-u0 = null
cs-t100 = null
cs-t113 = null
cs-t114 = null

[CustomShaderRenderText]
; The vertex shader passes draw indexes to the geometry shader:
vs = Shaders/TextPrinter.hlsl
; The geometry shader generates the text for a given draw index:
gs = Shaders/TextPrinter.hlsl
; The pixel shader draws the font:
ps = Shaders/TextPrinter.hlsl
hs = null
ds = null
cs = null
; Allows us to use SV_Position.z to pack a texcoord, increasing the character
; limit per geometry shader invocation:
depth_clip_enable = false
; Disable front/back face culling so the vertices can be in any rotation
cull = none
; Enable alpha blending. To change the text colour, edit the pixel shader:
blend = add one inv_src_alpha
; Use points as the primitive from the vertex shader to the geometry shader:
topology = point_list
; run = CommandListUnbindAllRenderTargets
o0 = set_viewport no_view_cache bb
; Font is passed into the pixel shader (to draw it) *and* the geometry shader
; (as the character sizes are encoded in the final character of the font):
gs-t100 = ResourceFont
ps-t100 = ResourceFont
post gs-t100 = null
post ps-t100 = null
; Pass resources to the shader
gs-t112 = ResourceTextPosition
gs-t113 = ResourceText
gs-t114 = ResourceTextParams
ps-t114 = ResourceTextParams
; Draw vertices
; Change this number to limit how much text may be drawn:
draw = 4096, 0
; Unbind resources
gs-t112 = null
gs-t113 = null
gs-t114 = null
ps-t114 = null
ResourceText = null
ResourceTextParams = null

; Text Printing Resources -------------------------

; These resources hold the currently displayed help text and parameters. When
; ResourceText is null the shader will not be run:
[ResourceText]
[ResourceTextParams]
[ResourceFont]
; Note that this font has the size of each character embedded in the unused
; space of the final character, which the geometry shader uses to render each
; character the correct width. This font was generated with gen_bm_font.py,
; then converted to DDS (because our PNG loading seems to be broken o_O):
filename = Fonts/LiberationSans-Bold.dds

[ResourceTextPosition]
; A buffer passed from the formatting compute shader to the geometry shader,
; indicating which shader invocation draws which text at what position.
type = StructuredBuffer
stride = 16
array = 4096

; GUI -------------------------

[CommandListRenderGUI]

if time < 30
    ResourceText = ref ResourceVersionNotification
    ResourceTextParams = ref ResourceVersionNotificationParams
    run = CommandListPrintText
    if $first_run
        $show_user_guide = 1
        $first_run = 0
    endif
    ; run = CommandListShowCompatibilityModeNotification
endif

; if $show_compatibility_mode_notification
;     ResourceText = ref ResourceCompatibilityMode
;     ResourceTextParams = ref ResourceTopNotificationParams
;     run = CommandListPrintText
; endif

if $show_user_guide
    ResourceText = ref ResourceUserGuide
    ResourceTextParams = ref ResourceUserGuideParams
    run = CommandListPrintText
endif

if $show_hunting_mode_guide
    ResourceText = ref ResourceHuntingModeGuide
    ResourceTextParams = ref ResourceUserGuideParams
    run = CommandListPrintText
endif

; if ResourceErrorIncompatibleVersionModNameRef !== null
;     ResourceText = ref ResourceErrorIncompatibleVersionRef
;     ResourceTextParams = ref ResourceUserNotificationParams
;     run = CommandListPrintText

;     ResourceText = ref ResourceErrorIncompatibleVersionModNameRef
;     ResourceTextParams = ref ResourceErrorIncompatibleVersionModNameParams
;     run = CommandListPrintText
; endif

; if $compatibility_mode_switch_time != 0
;     if $enable_compatibility_mode
;         ResourceText = ref ResourceCompatibilityModeEnabled
;     else
;         ResourceText = ref ResourceCompatibilityModeDisabled
;     endif
;     ResourceTextParams = ResourceTopNotificationParams
;     run = CommandListPrintText
;     if time - $compatibility_mode_switch_time > 3
;         $compatibility_mode_switch_time = 0
;     endif
; endif

; [CommandListHideNotification]
; ResourceErrorIncompatibleVersionModNameRef = null

; [CommandListShowCompatibilityModeNotification]
; if $enable_compatibility_mode == -1
;     $enable_compatibility_mode = 1
;     $show_compatibility_mode_notification = 1
; endif

; [CommandListToggleCompatibilityMode]
; $enable_compatibility_mode = !$enable_compatibility_mode
; $compatibility_mode_switch_time = time

; GUI Resources -------------------------

; [ResourceCompatibilityModeEnabled]
; type = Buffer
; data = "Compatibility Mode: Enabled"

; [ResourceCompatibilityModeDisabled]
; type = Buffer
; data = "Compatibility Mode: Disabled"

[ResourceUserGuide]
type = buffer
format = R8_UINT
filename = Notifications/UserGuide.md

; [ResourceCompatibilityMode]
; type = buffer
; format = R8_UINT
; filename = Notifications/CompatibilityMode.md

[ResourceHuntingModeGuide]
type = buffer
format = R8_UINT
filename = Notifications/HuntingModeGuide.md

; [ResourceErrorOldVersionMod]
; type = buffer
; format = R8_UINT
; filename = Notifications/ErrorOldVersionMod.md

; [ResourceErrorCompatibilityModeDisabled]
; type = buffer
; format = R8_UINT
; filename = Notifications/ErrorCompatibilityModeDisabled.md

[ResourceErrorOldVersionGIMI]
type = buffer
format = R8_UINT
filename = Notifications/ErrorOldVersionGIMI.md

; [ResourceErrorIncompatibleVersionRef]
; [ResourceErrorIncompatibleVersionModNameRef]

; [ResourceUnnamedModName]
; type = Buffer
; data = "< Unnamed Mod >"

[ResourceTopNotificationParams]
type = StructuredBuffer
array = 1
data = R32_FLOAT  -0.25 +0.90 +0.25 +0.80   1.00 1.00 1.00 1.00   0.00 0.00 0.00 0.80   0.02  0.05   2 1   1   1.0
;                x1-^  y1-^  x2-^  y2-^   | R-^  G-^  B-^  A-^  | R-^  G-^  B-^  A-^  | ^-H    V-^ | ^ ^ | ^- text alignment: 0=left 1=center 2=right | ^- font scale
;                Rectangle (range -1:+1)  | Text Color          | Background Color    | Border     |  ^- h/v-anchor: 0=none 1=left/top 2=center 3=right/bottom 

[ResourceUserNotificationParams]
type = StructuredBuffer
array = 1
data = R32_FLOAT  -1.00 -1.0 +1 -1.0   0.25 1 0.25 1   0 0 0 0.75   0.00 0.00   1 3   0   1.0
;                 ^Bounds Rectangle^ | ^^^Colour^^^^ | Background | ^Border^^ | ^ ^ | ^ | ^-- font scale
;                 x1    y1   x2 y2   | r    g b    a | r g b a    | horz vert |  ^  | ^------ text alignment: 0=left 1=center 2=right
;                    range -1:+1     |               |            |           |  ^----------- h/v-anchor: 0=none 1=left/top 2=center 3=right/bottom

[ResourceErrorIncompatibleVersionModNameParams]
type = StructuredBuffer
array = 1
data = R32_FLOAT  -0.25 +0.15 +0.25 -0.05   1.00 1.00 1.00 1.00   0.00 0.00 0.00 0.00   0.02  0.05   2 1   1   1.0
;                x1-^  y1-^  x2-^  y2-^   | R-^  G-^  B-^  A-^  | R-^  G-^  B-^  A-^  | ^-H    V-^ | ^ ^ | ^- text alignment: 0=left 1=center 2=right | ^- font scale
;                Rectangle (range -1:+1)  | Text Color          | Background Color    | Border     |  ^- h/v-anchor: 0=none 1=left/top 2=center 3=right/bottom 


[ResourceVersionNotificationParams]
type = StructuredBuffer
array = 1
data = R32_FLOAT  -0.95 -0.90 -0.00 -0.85   1.00 1.00 1.00 1.00   0.00 0.00 0.00 0.00   0.02  0.05   1 1   1   1.0
;                x1-^  y1-^  x2-^  y2-^   | R-^  G-^  B-^  A-^  | R-^  G-^  B-^  A-^  | ^-H    V-^ | ^ ^ | ^- text alignment: 0=left 1=center 2=right | ^- font scale
;                Rectangle (range -1:+1)  | Text Color          | Background Color    | Border     |  ^- h/v-anchor: 0=none 1=left/top 2=center 3=right/bottom 


[ResourceUserGuideParams]
type = StructuredBuffer
array = 1
data = R32_FLOAT  -0.40 +0.00 +0.40 -0.00   1.00 1.00 1.00 1.00   0.00 0.00 0.00 0.80   0.02  0.05   2 2   0   1.0
;                x1-^  y1-^  x2-^  y2-^   | R-^  G-^  B-^  A-^  | R-^  G-^  B-^  A-^  | ^-H    V-^ | ^ ^ | ^- text alignment: 0=left 1=center 2=right | ^- font scale
;                Rectangle (range -1:+1)  | Text Color          | Background Color    | Border     |  ^- h/v-anchor: 0=none 1=left/top 2=center 3=right/bottom 

; EoF -------------------------
