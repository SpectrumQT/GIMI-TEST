namespace=Debugger


[KeyTest]
key = SHIFT F12
type = cycle
$show_debug_output = 0,1


[Constants]
global persist $show_debug_output = 0
global $run_once = 0

; Used for text output if autodetection fails
global $window_width = 1920
global $window_height = 1080


[Present]
if $show_debug_output
	ResourceCB = null
	ResourceBuf = null
	ResourceBufUint = null
	ResourceBufRaw = null
	run = CustomShaderDebugOutput
	run = CustomShaderDebugCB
endif

	

; Usage Examples:

; ; Print time as first value of second row
; z101 = time

; ; Catch some buffer from some ini with namespace=SomeNamespace one time
; if $run_once == 0
	; ResourceDebugRW = copy Resource\SomeNamespace\DebugRW
	; $run_once = 1
; endif

; ; Set first row values to 1 2 3 4 on CTRL+ALT+T press
; [KeyTest]
; key = CTRL ALT T
; run = CommandListTest
; [CommandListTest]
; x100 = 1
; y100 = 2
; z100 = 3
; w100 = 4


[CustomShaderDebugOutput]
if ResourceDebugRW === null
	; Print IniParams values in top-left corner of the screen:
	; x100, y100, z100, w100
	; x101, y101, z101, w101
	; x102, y102, z102, w102
	; x102, y103, z103, w103
	ResourceBuf = ResourceDebug
	cs = Shaders/Debugger.hlsl
	cs-u1 = ResourceDebug
	Dispatch = 1, 1, 1
else
	; Print contents of ResourceDebugRW buffer in top-left corner of the screen
	ResourceBuf = ResourceDebugRW
endif


; Empty resource that supposed to store references to other buffers
; Can be accessed from another ini via `Resource\Debugger\DebugRW = ref ResourceSomeBuffer`
[ResourceDebugRW]

; Stores x100 - w103 values
[ResourceDebug]
type = RWBuffer
format = R32G32B32A32_FLOAT
data = 0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0

; Example of custom RW buffer format to use for custom shader debugging
; [ResourceDebugRW]
; type = RWBuffer
; format = R32G32B32A32_FLOAT
; array = 128


[ResourceCB]
[ResourceBuf]
[ResourceBufUint]
[ResourceBufRaw]

[ResourceCBFont]
; Note that this font has the size of each character embedded in the unused
; space of the final character, which the geometry shader uses to render each
; character the correct width. This font was generated with gen_bm_font.py,
; then converted to DDS (because our PNG loading seems to be broken o_O):
filename = Fonts/LiberationSans-Bold.dds


[CommandListPassWindowInfo]
; Pass a game window size to the shader
if window_width >= 640
    x0 = window_width
    y0 = window_height
; Fall back to backup methods if user gets zeroes due to 3dmigoto bug
else if rt_width >= 640
    x0 = rt_width
    y0 = rt_height
else if res_width >= 640
    x0 = res_width
    y0 = res_height
else
    x0 = $window_width
    y0 = $window_height
endif


[CustomShaderDebugCB]
; The vertex shader passes constant buffer indexes to the geometry shader:
vs = Shaders/debug_cb.hlsl
hs = null
ds = null
; The geometry shader generates the text for a given constant buffer index:
gs = Shaders/debug_cb.hlsl
; The pixel shader draws the font:
ps = Shaders/debug_cb.hlsl
; Disable compiler optimisations to save 1.5 seconds every F10. The shader
; becomes significantly larger and potentially slower, but that doesn't matter
; since it is a debugging shader:
flags = skip_optimization
; Allows us to use SV_Position.z to pack a texcoord, increasing the character
; limit per geometry shader invocation:
depth_clip_enable = false
cull = none
; Enable alpha blending. To change the text colour, edit the pixel shader:
blend = add one inv_src_alpha
; Use points as the primitive from the vertex shader to the geometry shader:
topology = point_list
run = BuiltInCommandListUnbindAllRenderTargets
o0 = set_viewport no_view_cache bb
; Pass the constant buffer to view into the geometry shader:
gs-cb13 = ResourceCB
gs-t113 = ResourceBuf
gs-t114 = ResourceBufUint
; raw forces raw access in cases where the buffer supports either way:
gs-t115 = raw ResourceBufRaw
; x is used by the shader to check if anything is bound to the cb13 slot (t113
; is checked with GetDimensions):
local $bak_x = x
local $bak_y = y
local $bak_z = z
local $bak_w = w
run = CommandListPassWindowInfo
z = gs-cb13
; Pass reported DPI to calculate required scaling
w = effective_dpi
; Font is passed into the pixel shader (to draw it) *and* the geometry shader
; (as the character sizes are encoded in the final character of the font):
gs-t100 = ResourceCBFont
ps-t100 = ResourceCBFont
; Change this number to set how many entries are drawn:
draw = 4096, 0
; I didn't back these up because I doubt they will be in use and this shader
; won't be enabled in production, but it's still good practice to clear them:
post gs-cb13 = null
post gs-t113 = null
post gs-t114 = null
post gs-t115 = null
post gs-t100 = null
post ps-t100 = null
post x = $bak_x
post y = $bak_y
post z = $bak_z
post w = $bak_w



