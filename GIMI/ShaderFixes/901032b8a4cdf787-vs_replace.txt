// ShaderOverrideNatlanDiffuseVSFXActive offset by LeoTorreZ ---- Created with 3Dmigoto v1.3.16 on Fri Oct 11 12:36:36 2024
Texture2D<float4> t0 : register(t0);

SamplerState s0_s : register(s0);

cbuffer cb3 : register(b3)
{
  float4 cb3[25];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[7];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[7];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[175];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
#define OFFSET IniParams[169].x


void main(
  float4 v0 : POSITION0,
  float3 v1 : NORMAL0,
  float4 v2 : TANGENT0,
  float4 v3 : TEXCOORD0,
  float4 v4 : TEXCOORD1,
  float4 v5 : TEXCOORD2,
  float4 v6 : TEXCOORD3,
  float4 v7 : COLOR0,
  out float4 o0 : SV_POSITION0,
  out float4 o1 : COLOR0,
  out float4 o2 : TEXCOORD0,
  out float4 o3 : TEXCOORD1,
  out float4 o4 : TEXCOORD2,
  out float4 o5 : TEXCOORD3,
  out float4 o6 : TEXCOORD4,
  out float4 o7 : TEXCOORD5,
  out float4 o8 : TEXCOORD6,
  out float4 o9 : TEXCOORD11,
  out float4 o10 : TEXCOORD12)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = cmp(0 != cb0[124].w);
  if (r0.x != 0) {
    r0.x = t0.SampleLevel(s0_s, cb0[126].xy, 0).x;
    r0.x = cmp(0.5 < r0.x);
    r0.x = r0.x ? 1.000000 : 0;
  } else {
    r0.y = cmp(0 != cb0[125].x);
    r0.x = r0.y ? 1.000000 : 0;
  }
  r0.y = cmp(0.5 < cb0[172].w);
  r0.x = r0.y ? 1 : r0.x;
  r0.y = cmp(0.5 < cb0[171].w);
  r0.z = cmp(0.5 < cb0[114].w);
  r0.y = (int)r0.z | (int)r0.y;
  o8.w = r0.y ? 0 : r0.x;
  r0.xyz = cb2[1].xyz * v0.yyy;
  r0.xyz = cb2[0].xyz * v0.xxx + r0.xyz;
  r0.xyz = cb2[2].xyz * v0.zzz + r0.xyz;
  r0.xyz = cb2[3].xyz + r0.xyz;
  r1.xyz = cb1[5].xyz + -r0.xyz;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = rsqrt(r0.w);
  o6.xyz = r1.xyz * r0.www;
  r2.x = dot(v1.xyz, cb2[4].xyz);
  r2.y = dot(v1.xyz, cb2[5].xyz);
  r2.z = dot(v1.xyz, cb2[6].xyz);
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = rsqrt(r0.w);
  o7.xyz = r2.xyz * r0.www;
  r2.xyzw = cb2[1].xyzw * v0.yyyy;
  r2.xyzw = cb2[0].xyzw * v0.xxxx + r2.xyzw;
  r2.xyzw = cb2[2].xyzw * v0.zzzz + r2.xyzw;
  r2.xyzw = cb2[3].xyzw + r2.xyzw;
  r0.w = cb3[10].z * r2.y;
  r0.w = cb3[9].z * r2.x + r0.w;
  r0.w = cb3[11].z * r2.z + r0.w;
  r0.w = cb3[12].z * r2.w + r0.w;
  o6.w = -r0.w;
  r2.xyw = cb2[3].xyz + -cb1[5].xyz;
  r2.y += OFFSET;
  r3.x = cb2[0].x;
  r3.y = cb2[1].x;
  r3.z = cb2[2].x;
  r3.w = r2.x;
  r4.xyz = v0.xyz;
  r4.w = 1;
  r0.w = dot(r3.xyzw, r4.xyzw);
  r3.x = cb2[0].y;
  r3.y = cb2[1].y;
  r3.z = cb2[2].y;
  r3.w = r2.y;
  r1.w = dot(r3.xyzw, r4.xyzw);
  r2.x = cb2[0].z;
  r2.y = cb2[1].z;
  r2.z = cb2[2].z;
  r2.x = dot(r2.xyzw, r4.xyzw);
  r3.x = cb2[0].w;
  r3.y = cb2[1].w;
  r3.z = cb2[2].w;
  r3.w = cb2[3].w;
  r2.y = dot(r3.xyzw, r4.xyzw);
  r3.xyzw = cb3[22].xyzw * r1.wwww;
  r3.xyzw = cb3[21].xyzw * r0.wwww + r3.xyzw;
  r3.xyzw = cb3[23].xyzw * r2.xxxx + r3.xyzw;
  r2.xyzw = cb3[24].xyzw * r2.yyyy + r3.xyzw;
  r3.z = -cb0[24].y * r2.w + r2.z;
  r0.w = cmp(0 != cb0[153].x);
  r1.w = cmp(cb0[153].y < 0.949999988);
  r0.w = r0.w ? r1.w : 0;
  if (r0.w != 0) {
    r0.w = cb1[6].x * cb0[174].w;
    r4.x = cb0[174].z * r2.w;
    r4.y = r0.w * r2.w;
    r2.xy = r4.xy * float2(2,2) + r2.xy;
    r2.z = r2.w;
    r4.xz = float2(0.5,0.5);
    r4.y = cb1[6].x;
    r4.xyz = r4.xyz * r2.xyz;
    r4.w = 0.5 * r4.y;
    r3.xy = r4.xw + r4.zz;
    r4.xyz = r3.xyz;
  } else {
    r5.xz = float2(0.5,0.5);
    r5.y = cb1[6].x;
    r5.xyz = r5.xyz * r2.xyw;
    r5.w = 0.5 * r5.y;
    r4.xy = r5.xw + r5.zz;
    r4.z = r2.z;
  }
  o10.xy = v3.xy * cb0[103].xy + cb0[103].zw;
  o10.zw = v4.xy * cb0[103].xy + cb0[103].zw;
  r0.w = cmp(0 != cb0[24].x);
  r3.xyw = cb2[3].xyz + -r0.xyz;
  o9.xyz = r0.www ? r3.xyw : r1.xyz;
  r2.z = r3.z;
  o0.xyzw = r2.xyzw;
  o1.xyzw = v7.xyzw;
  o2.xy = v3.xy;
  o2.zw = float2(0,0);
  o3.xy = v4.xy;
  o3.zw = float2(0,0);
  o4.xy = v5.xy;
  o4.zw = v6.xy;
  r4.w = r2.w;
  o5.xyzw = r4.xyzw;
  o7.w = 1;
  o8.xyz = r0.xyz;
  o9.w = 0;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Fri Oct 11 12:36:36 2024
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz
// NORMAL                   0   xyz         1     NONE   float   xyz
// TANGENT                  0   xyzw        2     NONE   float
// TEXCOORD                 0   xyzw        3     NONE   float   xy
// TEXCOORD                 1   xyzw        4     NONE   float   xy
// TEXCOORD                 2   xyzw        5     NONE   float   xy
// TEXCOORD                 3   xyzw        6     NONE   float   xy
// COLOR                    0   xyzw        7     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 1   xyzw        3     NONE   float   xyzw
// TEXCOORD                 2   xyzw        4     NONE   float   xyzw
// TEXCOORD                 3   xyzw        5     NONE   float   xyzw
// TEXCOORD                 4   xyzw        6     NONE   float   xyzw
// TEXCOORD                 5   xyzw        7     NONE   float   xyzw
// TEXCOORD                 6   xyzw        8     NONE   float   xyzw
// TEXCOORD                11   xyzw        9     NONE   float   xyzw
// TEXCOORD                12   xyzw       10     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[175], immediateIndexed
dcl_constantbuffer CB1[7], immediateIndexed
dcl_constantbuffer CB2[7], immediateIndexed
dcl_constantbuffer CB3[25], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input v0.xyz
dcl_input v1.xyz
dcl_input v3.xy
dcl_input v4.xy
dcl_input v5.xy
dcl_input v6.xy
dcl_input v7.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_output o6.xyzw
dcl_output o7.xyzw
dcl_output o8.xyzw
dcl_output o9.xyzw
dcl_output o10.xyzw
dcl_temps 6
ne r0.x, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[124].w
if_nz r0.x
  sample_l_indexable(texture2d)(float,float,float,float) r0.x, cb0[126].xyxx, t0.xyzw, s0, l(0.000000)
  lt r0.x, l(0.500000), r0.x
  and r0.x, r0.x, l(0x3f800000)
else
  ne r0.y, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[125].x
  and r0.x, r0.y, l(0x3f800000)
endif
lt r0.y, l(0.500000), cb0[172].w
movc r0.x, r0.y, l(1.000000), r0.x
lt r0.y, l(0.500000), cb0[171].w
lt r0.z, l(0.500000), cb0[114].w
or r0.y, r0.z, r0.y
movc o8.w, r0.y, l(0), r0.x
mul r0.xyz, v0.yyyy, cb2[1].xyzx
mad r0.xyz, cb2[0].xyzx, v0.xxxx, r0.xyzx
mad r0.xyz, cb2[2].xyzx, v0.zzzz, r0.xyzx
add r0.xyz, r0.xyzx, cb2[3].xyzx
add r1.xyz, -r0.xyzx, cb1[5].xyzx
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul o6.xyz, r0.wwww, r1.xyzx
dp3 r2.x, v1.xyzx, cb2[4].xyzx
dp3 r2.y, v1.xyzx, cb2[5].xyzx
dp3 r2.z, v1.xyzx, cb2[6].xyzx
dp3 r0.w, r2.xyzx, r2.xyzx
rsq r0.w, r0.w
mul o7.xyz, r0.wwww, r2.xyzx
mul r2.xyzw, v0.yyyy, cb2[1].xyzw
mad r2.xyzw, cb2[0].xyzw, v0.xxxx, r2.xyzw
mad r2.xyzw, cb2[2].xyzw, v0.zzzz, r2.xyzw
add r2.xyzw, r2.xyzw, cb2[3].xyzw
mul r0.w, r2.y, cb3[10].z
mad r0.w, cb3[9].z, r2.x, r0.w
mad r0.w, cb3[11].z, r2.z, r0.w
mad r0.w, cb3[12].z, r2.w, r0.w
mov o6.w, -r0.w
add r2.xyw, -cb1[5].xyxz, cb2[3].xyxz
mov r3.x, cb2[0].x
mov r3.y, cb2[1].x
mov r3.z, cb2[2].x
mov r3.w, r2.x
mov r4.xyz, v0.xyzx
mov r4.w, l(1.000000)
dp4 r0.w, r3.xyzw, r4.xyzw
mov r3.x, cb2[0].y
mov r3.y, cb2[1].y
mov r3.z, cb2[2].y
mov r3.w, r2.y
dp4 r1.w, r3.xyzw, r4.xyzw
mov r2.x, cb2[0].z
mov r2.y, cb2[1].z
mov r2.z, cb2[2].z
dp4 r2.x, r2.xyzw, r4.xyzw
mov r3.x, cb2[0].w
mov r3.y, cb2[1].w
mov r3.z, cb2[2].w
mov r3.w, cb2[3].w
dp4 r2.y, r3.xyzw, r4.xyzw
mul r3.xyzw, r1.wwww, cb3[22].xyzw
mad r3.xyzw, cb3[21].xyzw, r0.wwww, r3.xyzw
mad r3.xyzw, cb3[23].xyzw, r2.xxxx, r3.xyzw
mad r2.xyzw, cb3[24].xyzw, r2.yyyy, r3.xyzw
mad r3.z, -cb0[24].y, r2.w, r2.z
ne r0.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[153].x
lt r1.w, cb0[153].y, l(0.950000)
and r0.w, r0.w, r1.w
if_nz r0.w
  mul r0.w, cb0[174].w, cb1[6].x
  mul r4.x, r2.w, cb0[174].z
  mul r4.y, r2.w, r0.w
  mad r2.xy, r4.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), r2.xyxx
  mov r2.z, r2.w
  mov r4.xz, l(0.500000,0,0.500000,0)
  mov r4.y, cb1[6].x
  mul r4.xyz, r2.xyzx, r4.xyzx
  mul r4.w, r4.y, l(0.500000)
  add r3.xy, r4.zzzz, r4.xwxx
  mov r4.xyz, r3.xyzx
else
  mov r5.xz, l(0.500000,0,0.500000,0)
  mov r5.y, cb1[6].x
  mul r5.xyz, r2.xywx, r5.xyzx
  mul r5.w, r5.y, l(0.500000)
  add r4.xy, r5.zzzz, r5.xwxx
  mov r4.z, r2.z
endif
mad o10.xy, v3.xyxx, cb0[103].xyxx, cb0[103].zwzz
mad o10.zw, v4.xxxy, cb0[103].xxxy, cb0[103].zzzw
ne r0.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[24].x
add r3.xyw, -r0.xyxz, cb2[3].xyxz
movc o9.xyz, r0.wwww, r3.xywx, r1.xyzx
mov r2.z, r3.z
mov o0.xyzw, r2.xyzw
mov o1.xyzw, v7.xyzw
mov o2.xy, v3.xyxx
mov o2.zw, l(0,0,0,0)
mov o3.xy, v4.xyxx
mov o3.zw, l(0,0,0,0)
mov o4.xy, v5.xyxx
mov o4.zw, v6.xxxy
mov r4.w, r2.w
mov o5.xyzw, r4.xyzw
mov o7.w, l(1.000000)
mov o8.xyz, r0.xyzx
mov o9.w, l(0)
ret
// Approximately 0 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
