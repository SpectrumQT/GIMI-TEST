// Yelan Dash Fix by 澪然1112 ---- Created with 3Dmigoto v1.3.16 on Tue Apr 11 21:00:05 2023
cbuffer cb2 : register(b2)
{
  float4 cb2[21];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[7];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[7];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : POSITION0,
  float4 v1 : TANGENT0,
  float3 v2 : NORMAL0,
  float4 v3 : TEXCOORD0,
  float4 v4 : TEXCOORD1,
  float4 v5 : TEXCOORD2,
  float4 v6 : TEXCOORD3,
  float4 v7 : COLOR0,
  out float4 o0 : SV_POSITION0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = cb1[1].xyzw * v0.yyyy;
  r0.xyzw = cb1[0].xyzw * v0.xxxx + r0.xyzw;
  r0.xyzw = cb1[2].xyzw * v0.zzzz + r0.xyzw;
  r1.xyzw = cb1[3].xyzw + r0.xyzw;
  r0.xyz = cb1[3].xyz * v0.www + r0.xyz;
  r2.xyzw = cb2[18].xyzw * r1.yyyy;
  r2.xyzw = cb2[17].xyzw * r1.xxxx + r2.xyzw;
  r2.xyzw = cb2[19].xyzw * r1.zzzz + r2.xyzw;
  r1.xyzw = cb2[20].xyzw * r1.wwww + r2.xyzw;
  o0.xyzw = r1.xyzw;
  r2.x = cb2[9].z;
  r2.y = cb2[10].z;
  r2.z = cb2[11].z;
  r2.w = cb2[12].z;
  r0.w = 1;
  r0.w = dot(r2.xyzw, r0.xyzw);
  o1.xyz = r0.xyz;
  o1.w = cb0[6].y + r0.w;
  r0.x = dot(v2.xyz, cb1[4].xyz);
  r0.y = dot(v2.xyz, cb1[5].xyz);
  r0.z = dot(v2.xyz, cb1[6].xyz);
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  o2.xyz = r0.xyz * r0.www;
  r0.x = cb0[6].x * r1.y;
  r0.w = 0.5 * r0.x;
  r0.xz = float2(0.5,0.5) * r1.xw;
  o3.zw = r1.zw;
  o3.xy = r0.xw + r0.zz;
  o4.xyzw = float4(0,0,0,0);
  o2.w = 1;

  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Tue Apr 11 21:00:05 2023
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TANGENT                  0   xyzw        1     NONE   float
// NORMAL                   0   xyz         2     NONE   float   xyz
// TEXCOORD                 0   xyzw        3     NONE   float
// TEXCOORD                 1   xyzw        4     NONE   float
// TEXCOORD                 2   xyzw        5     NONE   float
// TEXCOORD                 3   xyzw        6     NONE   float
// COLOR                    0   xyzw        7     NONE   float
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyz         2     NONE   float   xyz
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[7], immediateIndexed
dcl_constantbuffer CB1[7], immediateIndexed
dcl_constantbuffer CB2[21], immediateIndexed
dcl_input v0.xyzw
dcl_input v2.xyz
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyz
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_temps 3
mul r0.xyzw, v0.yyyy, cb1[1].xyzw
mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
add r1.xyzw, r0.xyzw, cb1[3].xyzw
mad r0.xyz, cb1[3].xyzx, v0.wwww, r0.xyzx
mul r2.xyzw, r1.yyyy, cb2[18].xyzw
mad r2.xyzw, cb2[17].xyzw, r1.xxxx, r2.xyzw
mad r2.xyzw, cb2[19].xyzw, r1.zzzz, r2.xyzw
mad r1.xyzw, cb2[20].xyzw, r1.wwww, r2.xyzw
mov o0.xyzw, r1.xyzw
mov r2.x, cb2[9].z
mov r2.y, cb2[10].z
mov r2.z, cb2[11].z
mov r2.w, cb2[12].z
mov r0.w, l(1.000000)
dp4 r0.w, r2.xyzw, r0.xyzw
mov o1.xyz, r0.xyzx
add o1.w, r0.w, cb0[6].y
dp3 r0.x, v2.xyzx, cb1[4].xyzx
dp3 r0.y, v2.xyzx, cb1[5].xyzx
dp3 r0.z, v2.xyzx, cb1[6].xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul o2.xyz, r0.wwww, r0.xyzx
mul r0.x, r1.y, cb0[6].x
mul r0.w, r0.x, l(0.500000)
mul r0.xz, r1.xxwx, l(0.500000, 0.000000, 0.500000, 0.000000)
mov o3.zw, r1.zzzw
add o3.xy, r0.zzzz, r0.xwxx
mov o4.xyzw, l(0,0,0,0)
ret
// Approximately 0 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
